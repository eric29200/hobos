diff -ruN musl-1.2.3/ldso/dynlink.c musl-1.2.3-mine/ldso/dynlink.c
--- musl-1.2.3/ldso/dynlink.c	2022-04-07 19:12:40.000000000 +0200
+++ musl-1.2.3-mine/ldso/dynlink.c	2022-10-06 09:59:32.767483075 +0200
@@ -1711,11 +1711,14 @@
 	 * thread pointer at runtime. */
 	search_vec(auxv, &__hwcap, AT_HWCAP);
 	libc.auxv = auxv;
-	libc.tls_size = sizeof builtin_tls;
+	
+	/* HACK : disable TLS */
+
+	/*libc.tls_size = sizeof builtin_tls;
 	libc.tls_align = tls_align;
 	if (__init_tp(__copy_tls((void *)builtin_tls)) < 0) {
 		a_crash();
-	}
+	}*/
 
 	struct symdef dls3_def = find_sym(&ldso, "__dls3", 0);
 	if (DL_FDPIC) ((stage3_func)&ldso.funcdescs[dls3_def.sym-ldso.syms])(sp, auxv);
@@ -1954,20 +1957,25 @@
 
 	/* Actual copying to new TLS needs to happen after relocations,
 	 * since the TLS images might have contained relocated addresses. */
-	if (initial_tls != builtin_tls) {
-		if (__init_tp(__copy_tls(initial_tls)) < 0) {
-			a_crash();
-		}
-	} else {
-		size_t tmp_tls_size = libc.tls_size;
-		pthread_t self = __pthread_self();
-		/* Temporarily set the tls size to the full size of
-		 * builtin_tls so that __copy_tls will use the same layout
-		 * as it did for before. Then check, just to be safe. */
-		libc.tls_size = sizeof builtin_tls;
-		if (__copy_tls((void*)builtin_tls) != self) a_crash();
-		libc.tls_size = tmp_tls_size;
-	}
+
+	 /*
+	  * HACK : disable TLS
+	  */
+
+	//if (initial_tls != builtin_tls) {
+	//	if (__init_tp(__copy_tls(initial_tls)) < 0) {
+	//		a_crash();
+	//	}
+	//} else {
+	//	size_t tmp_tls_size = libc.tls_size;
+	//	pthread_t self = __pthread_self();
+	//	/* Temporarily set the tls size to the full size of
+	//	 * builtin_tls so that __copy_tls will use the same layout
+	//	 * as it did for before. Then check, just to be safe. */
+	//	libc.tls_size = sizeof builtin_tls;
+	//	if (__copy_tls((void*)builtin_tls) != self) a_crash();
+	//	libc.tls_size = tmp_tls_size;
+	//}
 
 	if (ldso_fail) _exit(127);
 	if (ldd_mode) _exit(0);
diff -ruN musl-1.2.3/src/env/__init_tls.c musl-1.2.3-mine/src/env/__init_tls.c
--- musl-1.2.3/src/env/__init_tls.c	2022-04-07 19:12:40.000000000 +0200
+++ musl-1.2.3-mine/src/env/__init_tls.c	2022-10-06 09:57:46.194195314 +0200
@@ -87,6 +87,9 @@
 	size_t base = 0;
 	void *mem;
 
+	/* HACK : disable TLS */
+	return;
+
 	for (p=(void *)aux[AT_PHDR],n=aux[AT_PHNUM]; n; n--,p+=aux[AT_PHENT]) {
 		phdr = (void *)p;
 		if (phdr->p_type == PT_PHDR)
diff -ruN musl-1.2.3/src/env/__reset_tls.c musl-1.2.3-mine/src/env/__reset_tls.c
--- musl-1.2.3/src/env/__reset_tls.c	2022-04-07 19:12:40.000000000 +0200
+++ musl-1.2.3-mine/src/env/__reset_tls.c	2022-10-06 09:57:46.194195314 +0200
@@ -4,6 +4,9 @@
 
 void __reset_tls()
 {
+	/* HACK : disable TLS */
+	return;
+
 	pthread_t self = __pthread_self();
 	struct tls_module *p;
 	size_t i, n = self->dtv[0];
diff -ruN musl-1.2.3/src/errno/__errno_location.c musl-1.2.3-mine/src/errno/__errno_location.c
--- musl-1.2.3/src/errno/__errno_location.c	2022-04-07 19:12:40.000000000 +0200
+++ musl-1.2.3-mine/src/errno/__errno_location.c	2022-10-06 09:57:46.194195314 +0200
@@ -1,9 +1,12 @@
 #include <errno.h>
 #include "pthread_impl.h"
 
+int errno_global = 0;
+
 int *__errno_location(void)
 {
-	return &__pthread_self()->errno_val;
+	/* HACK : disable TLS */
+	return &errno_global;
 }
 
 weak_alias(__errno_location, ___errno_location);
diff -ruN musl-1.2.3/src/internal/locale_impl.h musl-1.2.3-mine/src/internal/locale_impl.h
--- musl-1.2.3/src/internal/locale_impl.h	2022-04-07 19:12:40.000000000 +0200
+++ musl-1.2.3-mine/src/internal/locale_impl.h	2022-10-06 09:57:46.194195314 +0200
@@ -37,9 +37,17 @@
 #define C_LOCALE ((locale_t)&__c_locale)
 #define UTF8_LOCALE ((locale_t)&__c_dot_utf8_locale)
 
-#define CURRENT_LOCALE (__pthread_self()->locale)
+/* HACK : disable TLS */
+//#define CURRENT_LOCALE (__pthread_self()->locale)
+//#define CURRENT_UTF8 (!!__pthread_self()->locale->cat[LC_CTYPE])
 
-#define CURRENT_UTF8 (!!__pthread_self()->locale->cat[LC_CTYPE])
+#ifdef __GNUC__
+__attribute__((const))
+#endif
+hidden locale_t *___locale_global_location(void);
+
+#define CURRENT_LOCALE (*___locale_global_location())
+#define CURRENT_UTF8 (!!CURRENT_LOCALE->cat[LC_CTYPE])
 
 #undef MB_CUR_MAX
 #define MB_CUR_MAX (CURRENT_UTF8 ? 4 : 1)
diff -ruN musl-1.2.3/src/internal/__locale_location.c musl-1.2.3-mine/src/internal/__locale_location.c
--- musl-1.2.3/src/internal/__locale_location.c	1970-01-01 01:00:00.000000000 +0100
+++ musl-1.2.3-mine/src/internal/__locale_location.c	2022-10-06 09:57:46.198195361 +0200
@@ -0,0 +1,10 @@
+#include <locale.h>
+
+locale_t locale_global;
+
+locale_t *__locale_global_location(void)
+{
+	return &locale_global;
+}
+
+weak_alias(__locale_global_location, ___locale_global_location);
diff -ruN musl-1.2.3/src/locale/uselocale.c musl-1.2.3-mine/src/locale/uselocale.c
--- musl-1.2.3/src/locale/uselocale.c	2022-04-07 19:12:40.000000000 +0200
+++ musl-1.2.3-mine/src/locale/uselocale.c	2022-10-06 09:57:46.198195361 +0200
@@ -4,13 +4,7 @@
 
 locale_t __uselocale(locale_t new)
 {
-	pthread_t self = __pthread_self();
-	locale_t old = self->locale;
-	locale_t global = &libc.global_locale;
-
-	if (new) self->locale = new == LC_GLOBAL_LOCALE ? global : new;
-
-	return old == global ? LC_GLOBAL_LOCALE : old;
+	return LC_GLOBAL_LOCALE;
 }
 
 weak_alias(__uselocale, uselocale);
diff -ruN musl-1.2.3/src/process/_Fork.c musl-1.2.3-mine/src/process/_Fork.c
--- musl-1.2.3/src/process/_Fork.c	2022-04-07 19:12:40.000000000 +0200
+++ musl-1.2.3-mine/src/process/_Fork.c	2022-10-06 09:57:46.198195361 +0200
@@ -22,11 +22,12 @@
 	ret = __syscall(SYS_clone, SIGCHLD, 0);
 #endif
 	if (!ret) {
-		pthread_t self = __pthread_self();
+		/* HACK : disable TLS */
+		/*pthread_t self = __pthread_self();
 		self->tid = __syscall(SYS_gettid);
 		self->robust_list.off = 0;
 		self->robust_list.pending = 0;
-		self->next = self->prev = self;
+		self->next = self->prev = self;*/
 		__thread_list_lock = 0;
 		libc.threads_minus_1 = 0;
 		if (libc.need_locks) libc.need_locks = -1;
diff -ruN musl-1.2.3/src/stdio/ftrylockfile.c musl-1.2.3-mine/src/stdio/ftrylockfile.c
--- musl-1.2.3/src/stdio/ftrylockfile.c	2022-04-07 19:12:40.000000000 +0200
+++ musl-1.2.3-mine/src/stdio/ftrylockfile.c	2022-10-06 09:57:46.198195361 +0200
@@ -4,9 +4,7 @@
 
 void __do_orphaned_stdio_locks()
 {
-	FILE *f;
-	for (f=__pthread_self()->stdio_locks; f; f=f->next_locked)
-		a_store(&f->lock, 0x40000000);
+	return;
 }
 
 void __unlist_locked_file(FILE *f)
@@ -14,7 +12,6 @@
 	if (f->lockcount) {
 		if (f->next_locked) f->next_locked->prev_locked = f->prev_locked;
 		if (f->prev_locked) f->prev_locked->next_locked = f->next_locked;
-		else __pthread_self()->stdio_locks = f->next_locked;
 	}
 }
 
@@ -22,9 +19,7 @@
 {
 	f->lockcount = 1;
 	f->prev_locked = 0;
-	f->next_locked = self->stdio_locks;
 	if (f->next_locked) f->next_locked->prev_locked = f;
-	self->stdio_locks = f;
 }
 
 int ftrylockfile(FILE *f)
diff -ruN musl-1.2.3/src/thread/pthread_setcancelstate.c musl-1.2.3-mine/src/thread/pthread_setcancelstate.c
--- musl-1.2.3/src/thread/pthread_setcancelstate.c	2022-04-07 19:12:40.000000000 +0200
+++ musl-1.2.3-mine/src/thread/pthread_setcancelstate.c	2022-10-06 09:57:46.198195361 +0200
@@ -2,6 +2,9 @@
 
 int __pthread_setcancelstate(int new, int *old)
 {
+	/* HACK : disable TLS */
+	return 0;
+
 	if (new > 2U) return EINVAL;
 	struct pthread *self = __pthread_self();
 	if (old) *old = self->canceldisable;
